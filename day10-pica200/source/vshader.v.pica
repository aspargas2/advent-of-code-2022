; Matrix set up by CPU to convert natural coordinates to the framebuffer
.fvec projection[4]

; Processed puzzle input
.fvec input[80]

; Simple constants
.constf sconst0(0.0, 1.0, 256.0, 0.00390625)
.constf sconst1(-256.0, 0.0, 0.0, 0.0)
.alias zero   sconst0.xxxx
.alias one    sconst0.yyyy
.alias two56  sconst0.zzzz
.alias one256 sconst0.wwww ; 1/256
.alias n256   sconst1.xxxx

.constf cycles0 (20, 60, 100, 140)
.constf cycles1 (180, 220, 0, 0)

.consti loops (79, 0, 1, 0)

; Outputs
.out outpos position
.out outclr color

; xyz are vertex of a triangle
.alias inpos v0

;.bool onlyvert

.proc main
	; Force the w component of inpos to be 1.0
	mov r0.xyz, inpos
	mov r0.w,   one
	; outpos = projectionMatrix * inpos
	dp4 outpos.x, projection[0], r0
	dp4 outpos.y, projection[1], r0
	dp4 outpos.z, projection[2], r0
	dp4 outpos.w, projection[3], r0

	mov r15, zero
	mov r15.x, one

	for loops
		mov r14, input[aL]

		mov r13.xy, r14.wz
		call handleInput
		cmp zero, eq, eq, r13
		breakc cmp.x

		mov r13.xy, r14.yx
		call handleInput
		cmp zero, eq, eq, r13
		breakc cmp.x
	.end

	mov r15.x, r15.y
	mov r15.yzw, zero
loop_256:
	cmp two56, gt, gt, r15.x
	jmpc cmp.x, break_256
	add r15.x, n256, r15.x
	add r15.y, one, r15.y
	jmpc !cmp.x, loop_256
break_256:

	mov r0, one256
	mul r0, r15, r0
	mov r0.a, one
	mov outclr, r0

	end
.end

.proc handleInput
	cmp zero, eq, eq, r13.x
	ifc cmp.x
		mov r13, zero
	.end
	jmpc cmp.x, handleInput_ret

	add r15.z, one, r15.z
	call checkCycles
	cmp one, eq, eq, r13.x
	jmpc cmp.x, handleInput_ret
	nop

	add r15.z, one, r15.z
	call checkCycles
	add r15.x, r13.y, r15.x
	nop
handleInput_ret:
	nop
.end

.proc checkCycles
	cmp cycles0.x, eq, eq, r15.z
	jmpc cmp.x, checkCycles_match
	cmp cycles0.y, eq, eq, r15.z
	jmpc cmp.x, checkCycles_match
	cmp cycles0.z, eq, eq, r15.z
	jmpc cmp.x, checkCycles_match
	cmp cycles0.w, eq, eq, r15.z
	jmpc cmp.x, checkCycles_match
	cmp cycles1.x, eq, eq, r15.z
	jmpc cmp.x, checkCycles_match
	cmp cycles1.y, eq, eq, r15.z
	jmpc cmp.x, checkCycles_match
	nop
	jmpc !cmp.x, checkCycles_ret
	nop
checkCycles_match:
	mul r0.x, r15.x, r15.z
	add r15.y, r0.x, r15.y
checkCycles_ret:
	nop
.end